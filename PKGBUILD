# Maintainer: Dennis Guennewig dg1|vrnetze.de
pkgname=test_server
pkgver=0.4.1
pkgrel=1
pkgdesc="test server for proxy testing"
arch=(i686 x86_64)
url="https://github.com/dg-vrnetze/${pkgname}"
license=('MIT')
depends=('ruby' 'sqlite3' 'libgit2')
install=${pkgname}.install
makedepends=('rubygems' 'filegen' 'phantomjs' 'ruby-bundler' 'libatomic_ops')
source=(http://gems.rubyforge.org/gems/$pkgname-$pkgver.gem)
backup=etc/${pkgname}/config.yaml
backup=etc/${pkgname}/database.yml
backup=etc/${pkgname}/secrets.yml
noextract=($pkgname-$pkgver.gem)
sha256sums=('3b588304de0d540c7cf27b3da4ba05b028347cb0f2d69436f4193ca7c6d428fb')

package() {
  cd "$pkgdir"

  _ruby_api_version=$(ruby -e "puts Gem.ruby_api_version")
  _bundle_library_dir=/usr/lib/${pkgname}

  _library_dir=${_bundle_library_dir}/ruby/${_ruby_api_version}
  _gem_directory="${_library_dir}/gems/${pkgname}-${pkgver}"
  _share_dir="${_gem_directory}/share"
  _systemd_dir=/usr/lib/systemd/system
  _bin_dir=/usr/bin
  _data_dir=/var/${pkgname}/data
  _database_dir=${_data_dir}/db
  _files_dir=${_data_dir}/files
  _log_dir=/var/log/${pkgname}
  _config_dir=/etc/${pkgname}
  _examples_dir=/usr/share/${pkgname}/examples
  _cache_dir=/var/cache/${pkgname}
  _run_dir=/run/${pkgname}
  _tmp_files_dir=/usr/lib/tmpfiles.d
  _defaults_dir=/etc/default
  _tmp_files_file=${_tmp_files_dir}/${pkgname}.conf
  _config_file=${_config_dir}/config.yaml
  _service_user=$pkgname
  _service_group=$pkgname
  _service_environment_file=${_defaults_dir}/${pkgname}
  _access_log_file=${_log_dir}/access.log
  _error_log_file=${_log_dir}/error.log
  _debug_mode=false
  _log_level=warn
  _environment=production
  _listen_statement=tcp://127.0.0.1:8000
  _reload_config_signal=USR1
  _sass_cache_dir=${_cache_dir}/sass
  _pid_file=${_run_dir}/pid
  _executable_file=${_bin_dir}/${pkgname}
  _gem_file="${_gem_directory}/Gemfile"
  _bundle_config_directory=${_gem_directory}/.bundle
  _bundle_config_file=${_bundle_config_directory}/config
  _systemd_service_file=${_systemd_dir}/${pkgname}.service
  _bundle_without_groups="test:development:doc:profile"
  _database_configuration_file=${_config_dir}/database.yml
  _database_configuration_link=${_gem_directory}/config/database.yml
  _secrets_file=${_config_dir}/secrets.yml
  _secrets_link=${_gem_directory}/config/secrets.yml

  install -d ${pkgdir}$_library_dir 
  install -d ${pkgdir}$_bin_dir 
  install -d ${pkgdir}$_systemd_dir 
  install -d -m 770 ${pkgdir}$_data_dir
  install -d -m 770 ${pkgdir}$_database_dir
  install -d -m 770 ${pkgdir}$_files_dir
  install -d ${pkgdir}$_log_dir
  install -d ${pkgdir}$_config_dir
  install -d ${pkgdir}$_tmp_files_dir
  install -d ${pkgdir}$_sass_cache_dir
  install -d ${pkgdir}$_defaults_dir
  install -d ${pkgdir}$_bundle_config_directory

  msg "Starting download of gems. Don't get alert if the download takes a lot of time. Since rubygems 2.2.0 a new algorithm to resolve dependencies is used. Upgrade to > 2.2.0 via \"sudo /usr/bin/gem update --system\" to improve performance."

  set -x

  # Gem includes all files needed to build package
  /usr/bin/gem install \
    --env-shebang \
    --no-ri \
    --no-rdoc \
    --no-prerelease \
    --install-dir ${pkgdir}${_library_dir} \
    $pkgname

  # Installation of gems is done by using bundler because `test_server` is a
  # rails-application which requires a valid Gemfile.lock which can be
  # generated by bundler
  SOFTWARE_NAME=$pkgname \
    SOFTWARE_VERSION=$pkgver \
    RUBYLIB="${pkgdir}${_gem_directory}/lib" \
    GEMSPEC="${pkgdir}${_gem_directory}/${pkgname}.gemspec" \
    filegen ${pkgdir}${_share_dir}/archlinux/Gemfile.rb.erb > ${pkgdir}${_gem_file} 

  # Remove old lock
  rm -f ${pkgdir}${_gem_file}.lock

  # Install gems
  no_proxy='localhost' \
    /usr/bin/bundle install \
    --gemfile ${pkgdir}${_gem_file} \
    --without $_bundle_without_groups \
    --path "${pkgdir}${_bundle_library_dir}" \
    --no-binstubs

  ## Generate assets for production environment
  #RAILS_ENV=production \
  #  BUNDLE_GEMFILE=${pkgdir}${_gem_file} \
  #  BUNDLE_PATH=${pkgdir}${_library_dir} \
  #  BUNDLE_WITHOUT=$_bundle_without_groups \
  #  BUNDLE_FROZEN=1 \
  #  /usr/bin/bundle exec rake \
  #  -f ${pkgdir}${_gem_directory}/Rakefile.rails \
  #  assets:precompile

  # some files did not get a read bit while precompiling
  find ${pkgdir}${_gem_directory}/public/assets -type f -exec chmod a+r {} \;

  ## Overwrite bundler-config because it uses absolutes path written during
  ## package building
  #SOFTWARE_LIB=${_library_dir} \
  #  filegen ${pkgdir}${_share_dir}/archlinux/bundle_config.yaml.erb > ${pkgdir}${_bundle_config_file}
  # Delete bundler config otherwise the environment variables (BUNDLE_*) in
  # starter do not have an effect
  rm ${pkgdir}${_bundle_config_file}

  # A temp directory under /run is needed to run `test_server`
  RUN_DIR=$_run_dir \
    SERVICE_USER=$_service_user \
    SERVICE_GROUP=$_service_group \
    filegen  ${pkgdir}${_share_dir}/systemd/tmpfiles.conf.erb > ${pkgdir}${_tmp_files_file}

  chmod 644 ${pkgdir}${_tmp_files_file}

  # Generate `test_server`-service file for systemd
  COMMAND="${_executable_file} serve" \
    DESCRIPTION='Server to proxy tests' \
    SERVICE_USER=$_service_user \
    SERVICE_GROUP=$_service_group \
    DEFAULTS_FILE=$_service_environment_file \
    filegen  ${pkgdir}${_share_dir}/systemd/${pkgname}.service.erb > ${pkgdir}${_systemd_service_file}

  chmod 644 ${pkgdir}${_systemd_service_file}

  # Generate /etc/default/test_server-file
  VARIABLES="HOME=/home/$_service_user" \
    filegen  ${pkgdir}${_share_dir}/archlinux/defaults.sh.erb > ${pkgdir}${_service_environment_file}

  chmod 644 ${pkgdir}${_service_environment_file}

  # Generate default configuration for `test_server`
  ACCESS_LOG=$_access_log_file \
    ERROR_LOG=$_error_log_file \
    CONFIG_FILE=$_config_file \
    SECRETS_FILE=$_secrets_file \
    DEBUG_MODE=$_debug_mode \
    ENVIRONMENT=$_environment \
    LISTEN=$_listen_statement \
    LOG_LEVEL=$_log_level \
    PID_FILE=$_pid_file \
    RELOAD_CONFIG_SIGNAL=$_reload_config_signal \
    SASS_CACHE=$_sass_cache_dir \
    filegen  ${pkgdir}${_share_dir}/archlinux/config.yaml.erb > ${pkgdir}${_config_file}

  chmod 644 ${pkgdir}${_config_file}

  # Generate Database configuration
  DATABASE_DIRECTORY=$_database_dir \
    filegen  ${pkgdir}${_share_dir}/archlinux/database.yml.erb > ${pkgdir}${_database_configuration_file}

  ln -fs  ${_database_configuration_file} ${pkgdir}${_database_configuration_link}

  chmod 640 ${pkgdir}${_database_configuration_file}

  # Generate Secrets for your application
  filegen  ${pkgdir}${_share_dir}/archlinux/secrets.yml.erb > ${pkgdir}${_secrets_file}

  ln -fs  ${_secrets_file} ${pkgdir}${_secrets_link}

  chmod 640 ${pkgdir}${_secrets_file}

  # Generate wrapper to set all environment variables correctly to make
  # bundler find installed ruby gems
  SOFTWARE_BINARY=${_gem_directory}/bin/${pkgname} \
    SOFTWARE_LIB=${_library_dir} \
    BUNDLE_WITHOUT_GROUPS=$_bundle_without_groups \
    GEMFILE=${_gem_file} \
    filegen  ${pkgdir}${_share_dir}/archlinux/startup.sh.erb > ${pkgdir}${_executable_file}

  chmod a+x ${pkgdir}/${_bin_dir}/${pkgname}

  # Delete tempfiles
  rm -rf ${pkgdir}/${_library_dir}/cache
  rm -rf ${pkgdir}/${_library_dir}/{build_info,doc}

  # Install license
  install -D -m644 ${pkgdir}${_share_dir}/../LICENSE.md "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  set +x
}

# vim:set ts=2 sw=2 et:
